---
import { parseBookstores } from '../lib/csv/parser';
import { processBookstore } from '../lib/processors/bookstore';
import type { ProcessedBookstore } from '../types/bookstore';
import path from 'path';

// Load and process bookstore data
const csvPath = path.join(process.cwd(), 'src', 'data', 'bookstores.csv');
const { records } = await parseBookstores(csvPath);
const stores: ProcessedBookstore[] = records.map(processBookstore);

// Sort stores alphabetically by name
const sortedStores = stores.sort((a, b) => a.name.localeCompare(b.name));

console.log(`Loaded ${stores.length} stores for browse page`);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Browse All Bookstores - BookDir Canada</title>
    <meta name="description" content="Browse all Canadian bookstores in our comprehensive directory. Filter by province, city, or search by name to find independent bookstores near you." />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Preconnect for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-50 min-h-screen font-['Inter']">
    <!-- Skip to main content link -->
    <a 
      href="#main-content" 
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 text-white px-4 py-2 rounded-md z-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
    >
      Skip to main content
    </a>

    <!-- Navigation Header -->
    <header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50" role="banner">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <!-- Left side - Logo and title -->
          <div class="flex items-center">
            <a href="/" class="flex items-center text-gray-900 hover:text-blue-600 transition-colors">
              <div class="bg-blue-100 rounded-full p-2 mr-3">
                <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                </svg>
              </div>
              <span class="text-xl font-bold">BookDir</span>
            </a>
          </div>
          
          <!-- Right side - Navigation links -->
          <nav class="hidden md:flex space-x-8" role="navigation">
            <a href="/" class="text-gray-600 hover:text-gray-900 text-sm font-medium transition-colors">Home</a>
            <a href="/stores" class="text-blue-600 text-sm font-medium">Browse Stores</a>
            <a href="/#map-section" class="text-gray-600 hover:text-gray-900 text-sm font-medium transition-colors">Map View</a>
          </nav>
          
          <!-- Mobile menu button -->
          <button 
            class="md:hidden p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            aria-label="Open main menu"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>
      </div>
    </header>

    <main id="main-content">
      <!-- Page Header -->
      <section class="bg-gradient-to-r from-blue-600 to-indigo-700 text-white py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="text-center">
            <h1 class="text-3xl sm:text-4xl font-bold mb-4">Browse All Bookstores</h1>
            <p class="text-xl text-blue-100 max-w-2xl mx-auto mb-6">
              Discover {sortedStores.length} independent bookstores across Canada
            </p>
            <div class="flex justify-center">
              <a 
                href="/#map-section" 
                class="inline-flex items-center px-6 py-3 bg-yellow-400 hover:bg-yellow-300 text-gray-900 font-semibold rounded-full transition-colors shadow-lg focus:outline-none focus:ring-2 focus:ring-yellow-300 focus:ring-offset-2 focus:ring-offset-blue-600"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                View on Map
              </a>
            </div>
          </div>
        </div>
      </section>

      <!-- Filters Section -->
      <section class="py-8 bg-white border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="bg-gray-50 rounded-lg p-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div class="md:col-span-1">
                <label for="search" class="block text-sm font-medium text-gray-700 mb-2">Search by Name</label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                  </div>
                  <input 
                    type="text" 
                    id="search" 
                    placeholder="Enter bookstore name..."
                    class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
              
              <div class="md:col-span-1">
                <label for="province" class="block text-sm font-medium text-gray-700 mb-2">Filter by Province</label>
                <select 
                  id="province"
                  class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">All Provinces</option>
                  <option value="Alberta">Alberta</option>
                  <option value="British Columbia">British Columbia</option>
                  <option value="Manitoba">Manitoba</option>
                  <option value="New Brunswick">New Brunswick</option>
                  <option value="Newfoundland and Labrador">Newfoundland and Labrador</option>
                  <option value="Northwest Territories">Northwest Territories</option>
                  <option value="Nova Scotia">Nova Scotia</option>
                  <option value="Nunavut">Nunavut</option>
                  <option value="Ontario">Ontario</option>
                  <option value="Prince Edward Island">Prince Edward Island</option>
                  <option value="Quebec">Quebec</option>
                  <option value="Saskatchewan">Saskatchewan</option>
                  <option value="Yukon">Yukon</option>
                </select>
              </div>
              
              <div class="md:col-span-1">
                <label for="city" class="block text-sm font-medium text-gray-700 mb-2">Filter by City</label>
                <input 
                  type="text" 
                  id="city" 
                  placeholder="Enter city name..."
                  class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              
              <div class="md:col-span-1 flex items-end">
                <button 
                  type="button" 
                  onclick="clearFilters()"
                  class="w-full inline-flex items-center justify-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Clear All
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Results Section -->
      <section class="py-8">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <!-- Results Counter -->
          <div class="mb-6">
            <p class="text-sm text-gray-600">
              Showing <span id="results-count" class="font-semibold text-gray-900">{sortedStores.length}</span> of {sortedStores.length} bookstores
            </p>
          </div>

          <!-- Store Grid -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="store-grid">
            {sortedStores.map((store) => (
              <div class="store-card bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200" data-name={store.name.toLowerCase()} data-province={store.province?.toLowerCase() || ''} data-city={store.city?.toLowerCase() || ''}>
                <!-- Store Header -->
                <div class="flex items-start justify-between mb-4">
                  <div class="flex-1">
                    <h3 class="text-lg font-semibold text-gray-900 mb-1">{store.name}</h3>
                    <p class="text-sm text-gray-600">
                      {store.city && store.province ? `${store.city}, ${store.province}` : store.formattedAddress}
                    </p>
                  </div>
                  {store.ratingInfo && (
                    <div class="flex items-center ml-4">
                      <span class="text-yellow-400 text-sm">⭐</span>
                      <span class="text-sm font-medium text-gray-700 ml-1">
                        {store.ratingInfo.rating}/5
                      </span>
                      <span class="text-xs text-gray-500 ml-1">
                        ({store.ratingInfo.numReviews})
                      </span>
                    </div>
                  )}
                </div>

                <!-- Store Details -->
                <div class="space-y-2 mb-4">
                  <div class="flex items-start">
                    <svg class="w-4 h-4 text-gray-400 mt-0.5 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    <p class="text-sm text-gray-600">{store.formattedAddress}</p>
                  </div>
                  
                  {store.phone && (
                    <div class="flex items-center">
                      <svg class="w-4 h-4 text-gray-400 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                      </svg>
                      <a href={`tel:${store.phone}`} class="text-sm text-blue-600 hover:text-blue-800 transition-colors">
                        {store.phone}
                      </a>
                    </div>
                  )}
                  
                  {store.website && (
                    <div class="flex items-center">
                      <svg class="w-4 h-4 text-gray-400 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
                      </svg>
                      <a href={store.website} target="_blank" rel="noopener noreferrer" class="text-sm text-blue-600 hover:text-blue-800 transition-colors">
                        Visit website
                      </a>
                    </div>
                  )}

                  {store.description && (
                    <div class="mt-3">
                      <p class="text-sm text-gray-600 line-clamp-2">{store.description}</p>
                    </div>
                  )}
                </div>

                <!-- Action Buttons -->
                <div class="flex space-x-2">
                  <a 
                    href={`/#map-section`}
                    class="flex-1 inline-flex items-center justify-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                  >
                    <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    View on Map
                  </a>
                  
                  {store.phone && (
                    <a 
                      href={`tel:${store.phone}`}
                      class="inline-flex items-center justify-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                      aria-label={`Call ${store.name}`}
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                      </svg>
                    </a>
                  )}
                </div>
              </div>
            ))}
          </div>

          <!-- No Results Message -->
          <div id="no-results" class="hidden text-center py-12">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No bookstores found</h3>
            <p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
          </div>
        </div>
      </section>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-900 text-white py-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <div class="flex justify-center items-center mb-4">
            <div class="bg-blue-600 rounded-full p-2 mr-3">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
              </svg>
            </div>
            <span class="text-xl font-bold">BookDir</span>
          </div>
          <p class="text-gray-400 text-sm">
            Supporting independent bookstores across Canada
          </p>
        </div>
      </div>
    </footer>

    <script>
      // Province name to code mapping for flexible searching
      const provinceMapping = {
        'alberta': ['alberta', 'ab'],
        'british columbia': ['british columbia', 'bc'],
        'manitoba': ['manitoba', 'mb'],
        'new brunswick': ['new brunswick', 'nb'],
        'newfoundland and labrador': ['newfoundland and labrador', 'nl', 'newfoundland', 'labrador'],
        'northwest territories': ['northwest territories', 'nt', 'nwt'],
        'nova scotia': ['nova scotia', 'ns'],
        'nunavut': ['nunavut', 'nu'],
        'ontario': ['ontario', 'on'],
        'prince edward island': ['prince edward island', 'pei', 'pe'],
        'quebec': ['quebec', 'qc', 'québec'],
        'saskatchewan': ['saskatchewan', 'sk'],
        'yukon': ['yukon', 'yt']
      };

      // Get all store cards
      const storeCards = document.querySelectorAll('.store-card');
      const searchInput = document.getElementById('search');
      const provinceSelect = document.getElementById('province');
      const cityInput = document.getElementById('city');
      const resultsCount = document.getElementById('results-count');
      const noResults = document.getElementById('no-results');
      const storeGrid = document.getElementById('store-grid');

      // Function to check if a province matches the search term
      function matchesProvince(storeProvince, searchProvince) {
        if (!searchProvince) return true;
        
        const storeProvinceNormalized = storeProvince.toLowerCase().trim();
        const searchProvinceNormalized = searchProvince.toLowerCase().trim();
        
        // Direct match
        if (storeProvinceNormalized === searchProvinceNormalized) {
          return true;
        }
        
        // Check province mappings
        for (const [fullName, variants] of Object.entries(provinceMapping)) {
          if (variants.includes(searchProvinceNormalized)) {
            return variants.includes(storeProvinceNormalized) || storeProvinceNormalized === fullName;
          }
        }
        
        return false;
      }

      // Function to filter stores
      function filterStores() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const provinceTerm = provinceSelect.value.toLowerCase().trim();
        const cityTerm = cityInput.value.toLowerCase().trim();
        
        let visibleCount = 0;
        
        storeCards.forEach(card => {
          const name = card.getAttribute('data-name') || '';
          const province = card.getAttribute('data-province') || '';
          const city = card.getAttribute('data-city') || '';
          
          const matchesSearch = !searchTerm || name.includes(searchTerm);
          const matchesProvinceFilter = matchesProvince(province, provinceTerm);
          const matchesCity = !cityTerm || city.includes(cityTerm);
          
          const isVisible = matchesSearch && matchesProvinceFilter && matchesCity;
          
          if (isVisible) {
            card.style.display = 'block';
            card.classList.remove('hidden');
            visibleCount++;
          } else {
            card.style.display = 'none';
            card.classList.add('hidden');
          }
        });
        
        // Update results count and show/hide no results message
        resultsCount.textContent = visibleCount;
        
        if (visibleCount === 0) {
          storeGrid.style.display = 'none';
          noResults.classList.remove('hidden');
        } else {
          storeGrid.style.display = 'grid';
          noResults.classList.add('hidden');
        }
      }

      // Function to clear all filters
      function clearFilters() {
        searchInput.value = '';
        provinceSelect.value = '';
        cityInput.value = '';
        filterStores();
        searchInput.focus();
      }

      // Debounce function for input fields
      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }

      // Add event listeners
      searchInput.addEventListener('input', debounce(filterStores, 300));
      provinceSelect.addEventListener('change', filterStores);
      cityInput.addEventListener('input', debounce(filterStores, 300));

      // Handle search input clear button (X)
      searchInput.addEventListener('search', function() {
        if (this.value === '') {
          filterStores();
        }
      });

      // Handle escape key to clear search
      searchInput.addEventListener('keyup', function(e) {
        if (e.key === 'Escape') {
          clearFilters();
        }
      });

      // Add keyboard accessibility
      document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K to focus search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
          e.preventDefault();
          searchInput.focus();
        }
      });

      // Make clearFilters function globally available
      window.clearFilters = clearFilters;

      // Initialize
      console.log('Store search and filter functionality initialized');
      console.log(`Total stores loaded: ${storeCards.length}`);
    </script>
  </body>
</html> 