---
import Layout from '../../layouts/Layout.astro';
import { parseBookstores } from '../../lib/csv/parser';
import { processBookstore } from '../../lib/processors/bookstore';
import { generateStoreSlug, createSlugMapping } from '../../utils/slugify';
import { getStoreImageByName } from '../../utils/images';
import type { ProcessedBookstore } from '../../types/bookstore';
import path from 'path';

export async function getStaticPaths() {
  // Load and process bookstore data
  const csvPath = path.join(process.cwd(), 'src', 'data', 'bookstores.csv');
  const { records } = await parseBookstores(csvPath);
  const stores: ProcessedBookstore[] = records.map(processBookstore);

  // Generate paths for all stores
  const paths = stores.map(store => {
    const slug = generateStoreSlug(store.name, store.city, store.province);
    return {
      params: { slug },
      props: { store }
    };
  });

  return paths;
}

const { store } = Astro.props;

// Generate SEO-friendly meta data
const pageTitle = `${store.name} - ${store.city}, ${store.province} | BookDir`;
const pageDescription = store.description 
  ? `${store.description.substring(0, 150)}...`
  : `Visit ${store.name} in ${store.city}, ${store.province}. Find contact information, hours, reviews, and directions to this bookstore.`;

// Get store image
const storeImage = getStoreImageByName(store.name);

// Format rating for display
const rating = store.ratingInfo?.rating ? Number(store.ratingInfo.rating).toFixed(1) : null;
const numReviews = store.ratingInfo?.numReviews || 0;

// Format hours for display
const formatHours = (hours: any) => {
  const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
  const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
  return days.map((day, index) => ({
    day: dayNames[index],
    hours: hours[day] || 'Closed'
  }));
};
const formattedHours = formatHours(store.hours);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BookStore",
  "name": store.name,
  "description": store.description || `Bookstore in ${store.city}, ${store.province}`,
  "address": {
    "@type": "PostalAddress",
    "streetAddress": store.address,
    "addressLocality": store.city,
    "addressRegion": store.province,
    "postalCode": store.zip,
    "addressCountry": "CA"
  },
  "telephone": store.phone,
  "url": store.website,
  "geo": {
    "@type": "GeoCoordinates",
    "latitude": store.coordinates?.lat,
    "longitude": store.coordinates?.lng
  },
  "aggregateRating": store.ratingInfo ? {
    "@type": "AggregateRating",
    "ratingValue": store.ratingInfo.rating,
    "reviewCount": store.ratingInfo.numReviews
  } : undefined,
  "openingHours": formattedHours
    .filter(h => h.hours !== 'Closed')
    .map(h => `${h.day.substring(0, 2)} ${h.hours}`)
};
---

<Layout title={pageTitle} description={pageDescription}>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  <main class="bg-secondary min-h-screen py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto">
      <section class="bg-white rounded-2xl shadow-2xl p-8 flex flex-col md:flex-row gap-8 items-start">
        {storeImage && (
          <img src={storeImage} alt={`Photo of ${store.name}`} class="w-full md:w-64 h-64 object-cover rounded-xl shadow-md mb-6 md:mb-0" loading="lazy" />
        )}
        <div class="flex-1 w-full">
          <a href="/stores" class="inline-flex items-center mb-6 px-5 py-2.5 bg-gray-100 hover:bg-accent hover:text-secondary text-accent font-semibold rounded-full shadow transition-colors focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>
            Back to List
          </a>
          <h1 class="text-3xl sm:text-4xl font-bold text-text mb-2">{store.name}</h1>
          <div class="space-y-2 mb-4">
            <div class="flex items-center text-base text-text bg-gray-100 rounded px-3 py-1">
              <svg class="w-5 h-5 mr-1 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
              {store.address}, {store.city}, {store.province} {store.zip}
            </div>
            <div class="flex flex-wrap gap-2">
              {store.phone && (
                <a href={`tel:${store.phone}`} class="inline-flex items-center text-base text-accent hover:text-primary bg-gray-100 rounded px-3 py-1 transition-colors">
                  <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" /></svg>
                  {store.phone}
                </a>
              )}
              {store.website && (
                <a href={store.website} target="_blank" rel="noopener noreferrer" class="inline-flex items-center text-base text-accent hover:text-primary bg-gray-100 rounded px-3 py-1 transition-colors">
                  <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9" /></svg>
                  Website
                </a>
              )}
              <a href={`https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(store.formattedAddress)}`} target="_blank" rel="noopener noreferrer" class="inline-flex items-center text-base text-accent hover:text-primary bg-gray-100 rounded px-3 py-1 transition-colors">
                <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
                Directions
              </a>
            </div>
          </div>
          {rating && (
            <div class="flex items-center gap-2 mb-4">
              <span class="text-yellow-400 text-lg">‚≠ê</span>
              <span class="text-base font-medium text-text">{rating}/5</span>
              <span class="text-sm text-gray-500">({numReviews} reviews)</span>
            </div>
          )}
          {store.description && (
            <p class="text-lg text-text mt-6 mb-4 border-t border-gray-200 pt-4">{store.description}</p>
          )}
        </div>
      </section>
      {formattedHours.some(h => h.hours && h.hours !== 'Closed') && (
        <div class="w-full mt-8">
          <hr class="mb-6 border-gray-200" />
          <h2 class="text-lg font-semibold text-text mb-2">Hours</h2>
          <ul class="grid grid-cols-2 sm:grid-cols-4 md:grid-cols-7 gap-x-4 gap-y-2 text-base text-gray-700">
            {formattedHours.map(h => (
              <li key={h.day} class="flex flex-col items-center">
                <span class="font-medium">{h.day}</span>
                <span>{h.hours}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  </main>
</Layout> 