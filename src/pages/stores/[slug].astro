---
import Layout from '../../layouts/Layout.astro';
import { parseBookstores } from '../../lib/csv/parser';
import { processBookstore } from '../../lib/processors/bookstore';
import { generateStoreSlug, createSlugMapping } from '../../utils/slugify';
import { getStoreImageByName } from '../../utils/images';
import type { ProcessedBookstore } from '../../types/bookstore';
import path from 'path';

export async function getStaticPaths() {
  // Load and process bookstore data
  const csvPath = path.join(process.cwd(), 'src', 'data', 'bookstores.csv');
  const { records } = await parseBookstores(csvPath);
  const stores: ProcessedBookstore[] = records.map(processBookstore);

  // Generate paths for all stores
  const paths = stores.map(store => {
    const slug = generateStoreSlug(store.name, store.city, store.province);
    return {
      params: { slug },
      props: { store }
    };
  });

  return paths;
}

const { store } = Astro.props;

// Generate SEO-friendly meta data
const pageTitle = `${store.name} - ${store.city}, ${store.province} | BookDir`;
const pageDescription = store.description 
  ? `${store.description.substring(0, 150)}...`
  : `Visit ${store.name} in ${store.city}, ${store.province}. Find contact information, hours, reviews, and directions to this bookstore.`;

// Get store image
const storeImage = getStoreImageByName(store.name);

// Format rating for display
const rating = store.ratingInfo?.rating ? Number(store.ratingInfo.rating).toFixed(1) : null;
const numReviews = store.ratingInfo?.numReviews || 0;

// Format hours for display
const formatHours = (hours: any) => {
  const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
  const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
  return days.map((day, index) => ({
    day: dayNames[index],
    hours: hours[day] || 'Closed'
  }));
};
const formattedHours = formatHours(store.hours);

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BookStore",
  "name": store.name,
  "description": store.description || `Bookstore in ${store.city}, ${store.province}`,
  "address": {
    "@type": "PostalAddress",
    "streetAddress": store.address,
    "addressLocality": store.city,
    "addressRegion": store.province,
    "postalCode": store.zip,
    "addressCountry": "CA"
  },
  "telephone": store.phone,
  "url": store.website,
  "geo": {
    "@type": "GeoCoordinates",
    "latitude": store.coordinates?.lat,
    "longitude": store.coordinates?.lng
  },
  "aggregateRating": store.ratingInfo ? {
    "@type": "AggregateRating",
    "ratingValue": store.ratingInfo.rating,
    "reviewCount": store.ratingInfo.numReviews
  } : undefined,
  "openingHours": formattedHours
    .filter(h => h.hours !== 'Closed')
    .map(h => `${h.day.substring(0, 2)} ${h.hours}`)
};
---

<Layout title={pageTitle} description={pageDescription}>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  <main class="bg-secondary min-h-screen py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto">
      <section class="bg-white rounded-2xl shadow-2xl overflow-hidden">
        <!-- Header Section -->
        <div class="p-8">
          <a href="/stores" class="inline-flex items-center mb-6 px-5 py-2.5 bg-gray-100 hover:bg-accent hover:text-white text-accent font-semibold rounded-full shadow transition-colors focus:outline-none focus:ring-2 focus:ring-accent focus:ring-offset-2">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>
            Back to List
          </a>

          <div class="flex flex-col lg:flex-row gap-8 items-start">
            {storeImage && (
              <div class="w-full lg:w-80 flex-shrink-0">
                <img src={storeImage} alt={`Photo of ${store.name}`} class="w-full h-64 lg:h-80 object-cover rounded-xl shadow-lg" loading="lazy" />
              </div>
            )}
            
            <div class="flex-1 w-full">
              <h1 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">{store.name}</h1>
              
              <!-- Rating -->
              {rating && (
                <div class="flex items-center gap-2 mb-4">
                  <div class="flex items-center">
                    {[1, 2, 3, 4, 5].map(star => (
                      <svg key={star} class={`w-5 h-5 ${star <= Math.round(Number(rating)) ? 'text-yellow-400' : 'text-gray-300'}`} fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    ))}
                  </div>
                  <span class="text-lg font-semibold text-gray-900">{rating}</span>
                  <span class="text-gray-600">({numReviews} reviews)</span>
                </div>
              )}

              <!-- Address Card -->
              <div class="bg-gray-50 rounded-lg p-4 mb-4">
                <div class="flex items-start">
                  <svg class="w-5 h-5 text-red-500 mt-1 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <div class="text-gray-900">
                    <div class="font-medium">{store.address}</div>
                    <div>{store.city}, {store.province} {store.zip}</div>
                  </div>
                </div>
              </div>

              <!-- Contact Actions -->
              <div class="flex flex-wrap gap-3 mb-6">
                {store.phone && (
                  <a href={`tel:${store.phone}`} class="inline-flex items-center px-4 py-2 bg-secondary hover:bg-accent text-white font-medium rounded-lg transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                    </svg>
                    Call
                  </a>
                )}
                {store.website && (
                  <a href={store.website} target="_blank" rel="noopener noreferrer" class="inline-flex items-center px-4 py-2 bg-primary hover:bg-primary/90 text-white font-medium rounded-lg transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9" />
                    </svg>
                    Website
                  </a>
                )}
                <a href={`https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(store.formattedAddress)}`} target="_blank" rel="noopener noreferrer" class="inline-flex items-center px-4 py-2 bg-accent hover:bg-accent/90 text-white font-medium rounded-lg transition-colors">
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  Get Directions
                </a>
              </div>

              <!-- Description -->
              {store.description && (
                <div class="border-t border-gray-200 pt-6">
                  <h3 class="text-lg font-semibold text-gray-900 mb-3">About This Store</h3>
                  <p class="text-gray-700 leading-relaxed">{store.description}</p>
                </div>
              )}
            </div>
          </div>
        </div>

        <!-- Hours Section -->
        {formattedHours.some(h => h.hours && h.hours !== 'Closed') && (
          <div class="border-t border-gray-200 p-8">
            <h2 class="text-xl font-bold text-gray-900 mb-6 flex items-center">
              <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Store Hours
            </h2>
            
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {formattedHours.map(h => (
                <div key={h.day} class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span class="font-medium text-gray-900">{h.day}</span>
                  <span class={`font-medium ${h.hours === 'Closed' ? 'text-red-600' : 'text-green-600'}`}>
                    {h.hours}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}
      </section>
    </div>
  </main>
</Layout>